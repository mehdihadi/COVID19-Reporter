cfiDat <- data.frame(dates = pDat$Date[dateSub], cfiDat)
fig <- plot_ly(type = "scatter", mode = "none", name = "")
for (cc in 2:ncol(cfiDat)){
fig <- fig %>% add_trace(y = cfiDat[,cc],
x = dates[dateSub],
mode = "lines",
name = colnames(cfiDat)[cc],
hoverinfo = "text+name",
text = paste(format(cfiDat$dates, "%b %d"), round(cfiDat[,cc], 2)))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Curve-flattening index")),
range = yRange)
) %>%
config(displayModeBar = FALSE)
fig
DF
DF<-subset(timeSeriesActive, timeSeriesActive$Region %in% "Iran")
pDat <- DF
pDat
gRate <- as.matrix(growthRate(pDat[,-1], inWindow = ncol(pDat)-2)) #daily growth over all time
gRate
ncol(pDat)-2
ncol(pDat)
pDat[,-1]
DF<-WorldSumDiff_FP[which(WorldSumDiff_FP$Country.Region=="Iran"), ]
DF<-DF%>%
rename("Daily confirmed"= New.Confirmed, "Daily recovereds"= New.Recoverds, "Daily deaths"= New.Deaths)%>%
mutate(Active = Confirmed-Recovered-Deaths ) %>%
rename(Country=Country.Region)
pDat <- DF
pDat <- DF
pDat[,c("Active")]
nrow(pDat)
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-2)) #daily growth over all time
gRate
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
gRateMA
data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y"), gRateMA)
pDat <- DF
pDat
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRate
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-2)) #daily growth over all time
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat))) #daily growth over all time
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-2)) #daily growth over all time
gRate
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA
pDat$Date
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y"), gRateMA)
gRateMA
pDat$Date
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-3)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y"), gRateMA)
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat))) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y"), gRateMA)
gRateMA
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date[-1,], format = "%m.%d.%y"), gRateMA)
pDat$Date[-1,]
pDat$Date
pDat$Date(-1)
DF<-subset(timeSeriesActive, timeSeriesActive$Region %in% "Iran")
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,-1], inWindow = ncol(pDat)-2)) #daily growth over all time
gRate
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 1,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA
gRate
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
as.Date(colnames(gRate)
as.Date(colnames(gRate), format = "%m.%d.%y")
DF<-WorldSumDiff_FP[which(WorldSumDiff_FP$Country.Region=="Iran"), ]
DF<-DF%>%
rename("Daily confirmed"= New.Confirmed, "Daily recovereds"= New.Recoverds, "Daily deaths"= New.Deaths)%>%
mutate(Active = Confirmed-Recovered-Deaths ) %>%
rename(Country=Country.Region)
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = ncol(pDat)-2)) #daily growth over all time
gRate
pDat <- DF
pDat
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = ncol(pDat)-2)) #daily growth over all time
gRate
pDat[,c("Active")]
ncol(pDat)
pDat
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-2)) #daily growth over all time
gRate
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA
gRate
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
colnames(gRate)
as.Date(pDat$Date, format = "%m.%d.%y")
as.Date(pDat$Date, format = "%m.%d.%y")[-1]
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-1], gRateMA)
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-c(1:2)], gRateMA)
gRateMA
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-1], gRateMA)
gRateMA
if (nrow(gRateMA)>20) gRateMA <-tail(gRateMA, 50)
colnames(gRateMA)[-1] <- pDat$Region
# and plot
fig <- plot_ly(gRateMA, type = "scatter", mode = "none")
gRateMA
colnames(gRateMA)
colnames(gRateMA)[-1] <- pDat[1,1]
gRateMA
# and plot
fig <- plot_ly(gRateMA, type = "scatter", mode = "none")
fig
for (cc in 2:ncol(gRateMA)){
fig <- fig %>% add_trace(y = gRateMA[,cc],
x = ~dates,
mode = "lines",
name = colnames(gRateMA)[cc],
hoverinfo = "text+name",
text = paste(format(gRateMA$dates, "%b %d"), round(gRateMA[,cc], 1), "%"))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Growth rate (% per day)")))
) %>%
config(displayModeBar = FALSE)
fig
pMat<-as.matrix(log(pDat[,c("Active")]))
colnames(pMat)<-pDat[1,1]
cfiDat<-apply(pMat, MARGIN = 2, FUN = "cfi")
cfiDat[!is.finite(cfiDat)]<-0
dateSub<-3:length(pDat$Date) # date subset
for (cc in 1:ncol(cfiDat)){
cfiSmooth<-loess(cfiDat[,1]~as.numeric(pDat$Date[dateSub]))
cfiDat[,cc] <- predict(cfiSmooth, newdata = as.numeric(pDat$Date[dateSub]))
}
yRange <- as.list(range(cfiDat)*1.05)
cfiDat <- data.frame(dates = pDat$Date[dateSub], cfiDat)
fig <- plot_ly(type = "scatter", mode = "none", name = "")
for (cc in 2:ncol(cfiDat)){
fig <- fig %>% add_trace(y = cfiDat[,cc],
x = dates[dateSub],
mode = "lines",
name = colnames(cfiDat)[cc],
hoverinfo = "text+name",
text = paste(format(cfiDat$dates, "%b %d"), round(cfiDat[,cc], 2)))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Curve-flattening index")),
range = yRange)
) %>%
config(displayModeBar = FALSE)
fig
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-1], gRateMA)
if (nrow(gRateMA)>20) gRateMA <-tail(gRateMA, 50)
colnames(gRateMA)[-1] <- pDat[1,1]
# and plot
fig <- plot_ly(gRateMA, type = "scatter", mode = "none")
for (cc in 2:ncol(gRateMA)){
fig <- fig %>% add_trace(y = gRateMA[,cc],
x = ~dates,
mode = "lines",
name = colnames(gRateMA)[cc],
hoverinfo = "text+name",
text = paste(format(gRateMA$dates, "%b %d"), round(gRateMA[,cc], 1), "%"))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Growth rate (% per day)")))
) %>%
config(displayModeBar = FALSE)
fig
runApp()
runApp()
View(WorldSumMax)
View(WorldSumMax)
View(WorldSum_F)
View(WorldSum)
View(WorldSum_FP)
View(WorldSumAgr)
DF<-WorldSumDiff_FP[which(WorldSumDiff_FP$Country.Region=="Iran"), ]
View(DF)
pDat <- WorldSumAgr%>%
mutate(Active = Confirmed-Recovered-Deaths ) %>%
mutate(Country = "World" )
pDat
runApp()
DF<- WorldSumAgr%>%
mutate(Active = Confirmed-Recovered-Deaths ) %>%
mutate(Country = "World" )
DF
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-1], gRateMA)
if (nrow(gRateMA)>20) gRateMA <-tail(gRateMA, 50)
colnames(gRateMA)[-1] <- pDat[1,1]
# and plot
fig <- plot_ly(gRateMA, type = "scatter", mode = "none")
for (cc in 2:ncol(gRateMA)){
fig <- fig %>% add_trace(y = gRateMA[,cc],
x = ~dates,
mode = "lines",
name = colnames(gRateMA)[cc],
hoverinfo = "text+name",
text = paste(format(gRateMA$dates, "%b %d"), round(gRateMA[,cc], 1), "%"))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Growth rate (% per day)")))
) %>%
config(displayModeBar = FALSE)
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
pDat[,c("Active")]
nrow(pDat)-1
WorldSumAgr
DF<-WorldSumDiff_FP[which(WorldSumDiff_FP$Country.Region=="Iran"), ]
DF<-DF%>%
rename("Daily confirmed"= New.Confirmed, "Daily recovereds"= New.Recoverds, "Daily deaths"= New.Deaths)%>%
mutate(Active = Confirmed-Recovered-Deaths ) %>%
rename(Country=Country.Region)
DF
WorldSumAgr
data.frame(WorldSumAgr)
DF<- data.frame(WorldSumAgr)%>%
mutate(Active = Confirmed-Recovered-Deaths ) %>%
mutate(Country = "World" )
DF
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-1], gRateMA)
if (nrow(gRateMA)>20) gRateMA <-tail(gRateMA, 50)
colnames(gRateMA)[-1] <- pDat[1,1]
# and plot
fig <- plot_ly(gRateMA, type = "scatter", mode = "none")
for (cc in 2:ncol(gRateMA)){
fig <- fig %>% add_trace(y = gRateMA[,cc],
x = ~dates,
mode = "lines",
name = colnames(gRateMA)[cc],
hoverinfo = "text+name",
text = paste(format(gRateMA$dates, "%b %d"), round(gRateMA[,cc], 1), "%"))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Growth rate (% per day)")))
) %>%
config(displayModeBar = FALSE)
fig
pDat[1,1]
colnames(gRateMA)[-1]
pDat[1,1]
pDat
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-1], gRateMA)
if (nrow(gRateMA)>20) gRateMA <-tail(gRateMA, 50)
colnames(gRateMA)[-1] <- pDat[1,"Country"]
# and plot
fig <- plot_ly(gRateMA, type = "scatter", mode = "none")
for (cc in 2:ncol(gRateMA)){
fig <- fig %>% add_trace(y = gRateMA[,cc],
x = ~dates,
mode = "lines",
name = colnames(gRateMA)[cc],
hoverinfo = "text+name",
text = paste(format(gRateMA$dates, "%b %d"), round(gRateMA[,cc], 1), "%"))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Growth rate (% per day)")))
) %>%
config(displayModeBar = FALSE)
fig
runApp()
DF<- data.frame(WorldSumAgr)%>%
mutate(Active = Confirmed-Recovered-Deaths ) %>%
mutate(Country = "World" )
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-1], gRateMA)
if (nrow(gRateMA)>20) gRateMA <-tail(gRateMA, 50)
colnames(gRateMA)[-1] <- pDat[1,"Country"]
# and plot
fig <- plot_ly(gRateMA, type = "scatter", mode = "none")
for (cc in 2:ncol(gRateMA)){
fig <- fig %>% add_trace(y = gRateMA[,cc],
x = ~dates,
mode = "lines",
name = colnames(gRateMA)[cc],
hoverinfo = "text+name",
text = paste(format(gRateMA$dates, "%b %d"), round(gRateMA[,cc], 1), "%"))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Growth rate (% per day)")))
) %>%
config(displayModeBar = FALSE)
fig
DF<- data.frame(WorldSumAgr)%>%
mutate(Active = Confirmed-Recovered-Deaths ) %>%
mutate(Country = "World" )
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-1], gRateMA)
if (nrow(gRateMA)>20) gRateMA <-tail(gRateMA, 50)
colnames(gRateMA)[-1] <- pDat[1,"Country"]
# and plot
fig <- plot_ly(gRateMA, type = "scatter", mode = "none")
for (cc in 2:ncol(gRateMA)){
fig <- fig %>% add_trace(y = gRateMA[,cc],
x = ~dates,
mode = "lines",
name = colnames(gRateMA)[cc],
hoverinfo = "text+name",
text = paste(format(gRateMA$dates, "%b %d"), round(gRateMA[,cc], 1), "%"))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Growth rate (% per day)")))
) %>%
config(displayModeBar = FALSE)%>%
layout(plot_bgcolor='rgb(254, 247, 234)')
fig
DF<- data.frame(WorldSumAgr)%>%
mutate(Active = Confirmed-Recovered-Deaths ) %>%
mutate(Country = "World" )
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-1], gRateMA)
if (nrow(gRateMA)>20) gRateMA <-tail(gRateMA, 50)
colnames(gRateMA)[-1] <- pDat[1,"Country"]
# and plot
fig <- plot_ly(gRateMA, type = "scatter", mode = "none")
for (cc in 2:ncol(gRateMA)){
fig <- fig %>% add_trace(y = gRateMA[,cc],
x = ~dates,
mode = "lines",
name = colnames(gRateMA)[cc],
hoverinfo = "text+name",
text = paste(format(gRateMA$dates, "%b %d"), round(gRateMA[,cc], 1), "%"))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Growth rate (% per day)")))
) %>%
config(displayModeBar = FALSE)%>%
layout(plot_bgcolor='rgb(254, 247, 234)')%>%
layout(paper_bgcolor='rgb(254, 247, 234)')
fig
DF<- data.frame(WorldSumAgr)%>%
mutate(Active = Confirmed-Recovered-Deaths ) %>%
mutate(Country = "World" )
pDat <- DF
gRate <- as.matrix(growthRate(pDat[,c("Active")], inWindow = nrow(pDat)-1)) #daily growth over all time
gRateMA <- apply(gRate, # get moving average (three day window)
MARGIN = 2,
FUN = function(x, n = 3){stats::filter(x, rep(1 / n, n), sides = 1)})
gRateMA[is.infinite(gRateMA)]<-NA #remove Infs
# reorganise for plotting
gRateMA <- data.frame(dates = as.Date(pDat$Date, format = "%m.%d.%y")[-1], gRateMA)
if (nrow(gRateMA)>20) gRateMA <-tail(gRateMA, 50)
colnames(gRateMA)[-1] <- pDat[1,"Country"]
# and plot
fig <- plot_ly(gRateMA, type = "scatter", mode = "none")
for (cc in 2:ncol(gRateMA)){
fig <- fig %>% add_trace(y = gRateMA[,cc],
x = ~dates,
mode = "lines",
name = colnames(gRateMA)[cc],
hoverinfo = "text+name",
text = paste(format(gRateMA$dates, "%b %d"), round(gRateMA[,cc], 1), "%"))
}
fig <- fig %>% layout(xaxis = list(title = list(text = i18n$t("Date"))),
yaxis = list(title = list(text = i18n$t("Growth rate (% per day)")))
) %>%
config(displayModeBar = FALSE)%>%
layout(plot_bgcolor='yellow')%>%
layout(paper_bgcolor='yellow')
fig
runApp()
install.packages(c("dtwclust", "dygraphs", "mailR", "shiny.i18n", "shinyEffects", "shinyTime", "smooth", "tableHTML", "TSrepr"))
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("E:/IER-CWQR/RShiny/My shiny/COVID19 project/project before publish/Shiny.io/Version with seir/covid19-reporter")
setwd("E:/IER-CWQR/RShiny/My shiny/COVID19 project/project before publish/Shiny.io/Version with seir")
library("hexbin")
library(rsconnect)
rsconnect::setAccountInfo(name='mahdi-hadi',
token='16084ED9A1F670EB5046E9CDB94E55D7',
secret='Vy6uthI7NyMZZ76B/A8bG1BEfl/wxeCLL/a9LlII')
deployApp()
setwd("E:/IER-CWQR/RShiny/My shiny/COVID19 project/project before publish/Shiny.io/Version with seir/covid19-reporter")
rsconnect::setAccountInfo(name='mahdi-hadi',
token='16084ED9A1F670EB5046E9CDB94E55D7',
secret='Vy6uthI7NyMZZ76B/A8bG1BEfl/wxeCLL/a9LlII')
deployApp()
rsconnect::setAccountInfo(name='mahdi-hadi',
token='16084ED9A1F670EB5046E9CDB94E55D7',
secret='Vy6uthI7NyMZZ76B/A8bG1BEfl/wxeCLL/a9LlII')
deployApp()
setwd("E:/IER-CWQR/RShiny/My shiny/COVID19 project/project before publish/Shiny.io/Version with seir/covid19-reporter")
runApp()
setwd("E:/IER-CWQR/RShiny/My shiny/COVID19 project/project before publish/Shiny.io/Version with seir/covid19-reporter")
library("hexbin")
library(rsconnect)
rsconnect::setAccountInfo(name='mahdi-hadi',
token='16084ED9A1F670EB5046E9CDB94E55D7',
secret='Vy6uthI7NyMZZ76B/A8bG1BEfl/wxeCLL/a9LlII')
deployApp()
library("hexbin")
library(rsconnect)
rsconnect::setAccountInfo(name='mahdi-hadi',
token='16084ED9A1F670EB5046E9CDB94E55D7',
secret='Vy6uthI7NyMZZ76B/A8bG1BEfl/wxeCLL/a9LlII')
deployApp()
library("hexbin")
library(rsconnect)
rsconnect::setAccountInfo(name='mahdi-hadi',
token='16084ED9A1F670EB5046E9CDB94E55D7',
secret='Vy6uthI7NyMZZ76B/A8bG1BEfl/wxeCLL/a9LlII')
deployApp()
setwd("E:/IER-CWQR/RShiny/My shiny/COVID19 project/project before publish/Shiny.io/Version with seir/covid19-reporter")
library("hexbin")
library(rsconnect)
rsconnect::setAccountInfo(name='mahdi-hadi',
token='16084ED9A1F670EB5046E9CDB94E55D7',
secret='Vy6uthI7NyMZZ76B/A8bG1BEfl/wxeCLL/a9LlII')
deployApp()
shiny::runApp()
runApp()
shiny::runApp()
